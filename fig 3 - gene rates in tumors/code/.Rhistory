stop("Please ensure the dimensions of mean_profiles and fixed_profiles are the same.")
}
# make data frame for model:
df <- data.frame(obs = as.vector(mean_profiles),
ref = as.vector(fixed_profiles),
gene = rep(rownames(mean_profiles), ncol(mean_profiles)),
cell = rep(colnames(mean_profiles), each = nrow(mean_profiles)))
## find columns of mean_profiles with insufficient info, and remove:
# flag all-0 columns:
all_zero_columns <- colnames(mean_profiles)[colSums(mean_profiles) == 0]
# flag columns with too few non-zero values:
prop_nonzero <- colMeans(mean_profiles > 0)
poor_data_columns <- colnames(mean_profiles)[prop_nonzero < 0.1 * mean(prop_nonzero)]
# remove:
df <- df[!is.element(df$cell, c(all_zero_columns, poor_data_columns)), ]
# remove rows where ref == 0:
df <- df[df$ref > 0, ]
# lower-threshold the observed means so 0 values don't go to -Inf:
df$obs <- pmax(df$obs, quantile(df$obs[df$obs>0], 0.01))
# calc logratio
df$logratio <- log(df$obs / df$ref)
# fit the model:
mod <- lm(logratio ~ 0 + gene + cell, data = df, weights = log(ref) - min(log(ref)))
coefs <- mod$coefficients[grepl("gene", names(mod$coefficients))]
# add coefs for genes that got dropped due to all 0s in df:
names(coefs) <- gsub("gene", "", names(coefs))
lostgenes <- setdiff(rownames(mean_profiles), names(coefs))
coefs[lostgenes] <- mean(coefs)
coefs <- coefs[rownames(mean_profiles)]
return(exp(coefs))
}
estimate_platform_effects(mean_profiles = ioprofiles[1:100, 1:5], fixed_profiles = ioprofiles[1:100, 1:5] + rnorm(500))
library(seurat)
install.packages("seurat")
install.packages("Seurat")
library(seurat)
library(SpatialDecon)
# get mouse brain visium data:
InstallData("stxBrain")
library(Seurat)
# get mouse brain visium data:
InstallData("stxBrain")
library(SeuratData)
# get mouse brain visium data:
InstallData("stxBrain")
brain <- LoadData("stxBrain", type = "anterior1")
str(barin)
str(brain)
# download Allen mouse brain profiles:
load(url("https://github.com/Nanostring-Biostats/CellProfileLibrary/raw/NewProfileMatrices/Mouse/Adult/Brain_AllenBrainAtlas.RData"))
head(profile_matrix)
ls()
print(cellGroups)
print(cellGroups)
raw <- as.matrix(SeuratObject::GetAssayData(object, assay = "Spatial"))
raw <- as.matrix(SeuratObject::GetAssayData(brain, assay = "Spatial"))
str(raw)
head(profile_matrix)
?spatialdecon
View(spatialdecon())
View(spatialdecon)
View(algorithm2)
# run spatialdecon:
res <- spatialdecon(norm = raw, raw = raw, bg = 0.01,
X = profile_matrix, align_genes = TRUE, cellmerges = cellGroups)
raw <- as.matrix(SeuratObject::GetAssayData(brain, assay = "Spatial"))
dim(raw)
str(profile_matrix)
# run spatialdecon:
res <- spatialdecon(norm = raw, raw = raw, bg = 0.01,
X = as.matrix(profile_matrix), align_genes = TRUE, cellmerges = cellGroups)
str(res)
con <- gzcon(url("https://github.com/almaan/her2st/blob/master/data/ST-cnts/G1.tsv.gz"))
txt <- readLines(con)
temp <- read.table(textConnection(txt), sep = "\t")
dim(temp)
head(temp)
temp
load("C:/Users/pdanaher/Box Sync/Gemini/4089 - CPA 16 cell lines/Run4098_CPA_dataset.RData")
max(GemiObj@expression$rna$raw)
library(Giotto)
max(GemiObj@expression$rna$raw)
max(GemiObj@expression$raw)
ls()
max(GemiObj@expression)
max(GemiObj@expression_feat)
load("C:/Users/pdanaher/Box Sync/Gemini/vizgen mouse showcase/complete vizgene showcase data - counts and metadata.RData")
ls()
dim(raw)
min(rowSums(raw))
mean(rowSums(raw))
str(gem)
library(devtools)
devtools::install_github("Nanostring-Biostats/SpatialDecon",
ref = "resivions-for-journal",
build_vignettes = FALSE)
?install_github
devtools::install_github("Nanostring-Biostats/SpatialDecon",
ref = "master",
build_vignettes = FALSE)
devtools::install_github("Nanostring-Biostats/SpatialDecon",
ref = "revisions-for-journal",
build_vignettes = FALSE)
BiocManager::install("SpatialDecon")
sessionInfo()
>BiocManager::install
?BiocManager::install
BiocManager::version()
BiocManager::install("SpatialDecon", version = "3.10")
BiocManager::install("SpatialDecon", version = "3.11")
BiocManager::install("SpatialDecon", version = "3.12")
BiocManager::version()
sessionInfo()
library(SpatialDecon)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(SpatialDecon)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(SpatialDecon)
data("mini_geomx_dataset")
norm = mini_geomx_dataset$normalized
raw = mini_geomx_dataset$raw
annot = mini_geomx_dataset$annot
dim(raw)
head(annot)
raw[seq_len(5), seq_len(5)]
# better segment names:
colnames(norm) = colnames(raw) = rownames(annot) =
paste0(annot$ROI, annot$AOI.name)
# use the NegProbe to estimate per-observation background
per.observation.mean.neg = norm["NegProbe", ]
# and define a background matrix in which each column (observation) is the
# appropriate value of per-observation background:
bg = sweep(norm * 0, 2, per.observation.mean.neg, "+")
dim(bg)
bg2 = derive_GeoMx_background(norm = norm,
probepool = rep(1, nrow(norm)),
negnames = "NegProbe")
# vector identifying pure tumor segments:
annot$istumor = (annot$AOI.name == "Tumor")
# run spatialdecon with all the bells and whistles:
restils = spatialdecon(norm = norm,                     # normalized data
raw = raw,                       # raw data, used to down-weight low-count observations
bg = bg,                         # expected background counts for every data point in norm
X = safeTME,                     # safeTME matrix, used by default
cellmerges = safeTME.matches,   # safeTME.matches object, used by default
cell_counts = annot$nuclei,      # nuclei counts, used to estimate total cells
is_pure_tumor = annot$istumor,   # identities of the Tumor segments/observations
n_tumor_clusters = 5)            # how many distinct tumor profiles to append to safeTME
str(restils)
getwd()
counts = matrix(1:40,10)
clust = rep("a","b", 5)
by(counts, clust, colMeans)
by(t(counts), clust, colMeans)
counts
clust
by(counts, clust, colMeans)
clust
clust = rep(c("a","b"), 5)
by(counts, clust, colMeans)
sapply(by(counts, clust, colMeans), rbind)
sapply(by(counts, clust, colMeans), cbind)
sapply(by(counts, clust, colMeans), cbind)
load("C:/Users/pdanaher/Box Sync/IO360_archive/io360/analysis_tool/data_loader_supporting_files/signatures in the IO360 gene list.RData")
wts$Hypoxia
write.csv(wts$Hypoxia, file = "hypoxia weights.csv")
getwd()
setwd("~/SpatialDecon-manuscript-analyses/fig 6 - reverse decon/code")
rm(list = ls())
library(logNormReg)
library(ComplexHeatmap)
library(pheatmap)
library(SpatialDecon)
library(scales)
library(circlize)
library(umap)
#### load grid data from earlier script:
load("data/191 grid decon results.RData")
aoicols = c("chartreuse2", "darkcyan")
names(aoicols) = c("Tumor", "TME")
# infer polygon:
source("code/spaceplot utils.R")
bound = getBoundary(annot$x, annot$y, marg = 0.1)
#### model expression ~ cells -------------------------
beta = res$beta
#use.cells = rownames(res$beta)[rowSums(res$beta) > 25]
use.cells = rownames(beta)#[rowSums(res$beta) > 25]
ests = array(NA, dim = c(nrow(snr), length(use.cells) + 1, 2), dimnames = list(rownames(snr), c("b0", use.cells), c("Tumor", 'TME')))
rm(list = ls())
library(logNormReg)
library(ComplexHeatmap)
library(pheatmap)
library(SpatialDecon)
library(scales)
library(circlize)
library(umap)
#### load grid data from earlier script:
load("data/191 grid decon results.RData")
aoicols = c("chartreuse2", "darkcyan")
names(aoicols) = c("Tumor", "TME")
setwd("..")
load("data/191 grid decon results.RData")
aoicols = c("chartreuse2", "darkcyan")
names(aoicols) = c("Tumor", "TME")
# infer polygon:
source("code/spaceplot utils.R")
bound = getBoundary(annot$x, annot$y, marg = 0.1)
beta = res$beta
#use.cells = rownames(res$beta)[rowSums(res$beta) > 25]
use.cells = rownames(beta)#[rowSums(res$beta) > 25]
ests = array(NA, dim = c(nrow(snr), length(use.cells) + 1, 2), dimnames = list(rownames(snr), c("b0", use.cells), c("Tumor", 'TME')))
load("results/gene vs cells nlm results.RData")
# now get yhats:
yhat = snr * NA
for (ind in roiindices$TME) {
yhat[, ind] = ests[, c("b0", use.cells), "TME"] %*% c(1, beta[use.cells, ind])
}
for (ind in setdiff(roiindices$Tumor, NA)) {
yhat[, ind] = ests[, c("b0", use.cells), "Tumor"] %*% c(1, beta[use.cells, ind])
}
# and resids:
resids = log2(pmax(snr, 1)) - log2(pmax(yhat, 1))
# sanity check:
plot(yhat[1:100, ], snr[1:100, ])
# function to color by residuals:
rcols = colorRampPalette(c("darkblue", "grey70", "darkred"))(101)
rthresh = 1.5
rbreaks = seq(-rthresh, rthresh, length.out = 102)
colorresids = function(x) {
x2 = pmax(pmin(x, rthresh), -rthresh)
x3 = (x2 + rthresh) / (2 * rthresh)
col = rcols[round(x3 * 100) + 1]
return(col)
}
#
gene = "COL1A1"
par(mar = c(5,5,2,1))
plot(yhat[gene, roiindices$TME],
snr[gene, roiindices$TME],
col = alpha(colorresids(resids[gene, roiindices$TME]), 0.9),
pch = 16, cex = 2,
xlab = "Expression predicted from cell abundances",
ylab = "Observed expression", cex.lab = 1.5)
rlevels = seq(-2,2,0.5)
# color legend:
frame()
rlevels = seq(-2,2,0.5)
legend('center', pch = 16, col = colorresids(rlevels), legend = rlevels)
legend('center', pch = 16, c(NA, col = colorresids(rlevels)), legend = c("Residual value", rlevels))
legend('center', pch = 16, c(0, col = colorresids(rlevels)), legend = c("Residual value", rlevels))
# color legend:
frame()
rlevels = seq(-2,2,0.5)
legend('center', pch = 16, c(0, col = colorresids(rlevels)), legend = c("Residual value", rlevels))
colorresids(rlevels)
legend('center', pch = 16, c("white", col = colorresids(rlevels)), legend = c("Residual value", rlevels))
c("white", col = colorresids(rlevels))
#legend('center', pch = 16, c("white", col = colorresids(rlevels)), legend = c("Residual value", rlevels))
legend('center', pch = 16, c(col = colorresids(rlevels)), legend = c(rlevels))
rlevels = seq(-2,2,0.5)
#legend('center', pch = 16, c("white", col = colorresids(rlevels)), legend = c("Residual value", rlevels))
legend('center', pch = 16, c(col = colorresids(rlevels)), legend = c(rlevels))
# color legend:
frame()
rlevels = seq(-1.5,1.5,0.5)
#legend('center', pch = 16, c("white", col = colorresids(rlevels)), legend = c("Residual value", rlevels))
legend('center', pch = 16, c(col = colorresids(rlevels)), legend = c(rlevels))
#legend('center', pch = 16, c("white", col = colorresids(rlevels)), legend = c("Residual value", rlevels))
legend('center', pch = 16, col = c("white", colorresids(rlevels)), legend = c("Residual value", rlevels))
#legend('center', pch = 16, c("white", col = colorresids(rlevels)), legend = c("Residual value", rlevels))
legend('center', pch = 16, col = c("white", colorresids(rlevels)), legend = c("Residual value", rlevels), cex = 2)
frame()
legend('center', pch = 16, col = c("white", colorresids(rlevels)), legend = c("Residual value", rlevels), cex = 2, border = "white")
legend('center', pch = 16, col = c("white", colorresids(rlevels)), legend = c("Residual value", rlevels), cex = 2, border = NA)
legend('center', pch = 16, col = c("white", colorresids(rlevels)), legend = c("Residual value", rlevels), cex = 2, bty = "n")
frame()
legend('center', pch = 16, col = c("white", colorresids(rlevels)), legend = c("Residual value", rlevels), cex = 2, bty = "n")
svg("results/color legend.svg", width = 4, height = 6)
frame()
legend('center', pch = 16, col = c("white", colorresids(rlevels)), legend = c("Residual value", rlevels), cex = 2, bty = "n")
dev.off()
svg("results/color legend.svg", width = 3.5, height = 4)
frame()
legend('center', pch = 16, col = c("white", colorresids(rlevels)), legend = c("Residual value", rlevels), cex = 2, bty = "n")
dev.off()
svg("results/color legend.svg", width = 3.75, height = 5)
frame()
legend('center', pch = 16, col = c("white", colorresids(rlevels)), legend = c("Residual value", rlevels), cex = 2, bty = "n")
dev.off()
svg("results/color legend.svg", width = 4, height = 5)
frame()
legend('center', pch = 16, col = c("white", colorresids(rlevels)), legend = c("Residual value", rlevels), cex = 2, bty = "n")
dev.off()
setwd("~/SpatialDecon-manuscript-analyses/fig 3 - gene rates in tumors/code")
library(tidyr)
library(dplyr)
library(ggplot2)
library(here)
library(RColorBrewer)
library(readxl)
require(ggplotify)
library(ggridges)
library(ComplexHeatmap)
library(patchwork)
# retrieve commonly shared genes across all TCGA cancer types
filesList <- list.files(here("fig 3 - gene rates in tumors", "output"), ".rdata")
uniqueGene <- c()
for(i in seq_along(filesList)) {
fileName <- strsplit(filesList[i], "_res.rdata")[[1]]
load(here("fig 3 - gene rates in tumors", "output", filesList[i]))
if(length(uniqueGene)==0){
uniqueGene <- c(uniqueGene, as.character(res$gene))
}
uniqueGene <- intersect(uniqueGene, as.character(res$gene))
}
# combine expression data from TCGA cancer types
## assign each saved data into res
for(i in seq_along(filesList)) {
fileName <- strsplit(filesList[i], "_res.rdata")[[1]]
load(here("fig 3 - gene rates in tumors", "output", filesList[i]))
rownames(res) <- res$gene
newres <- res[uniqueGene,c(2,3)]
colnames(newres) <- c("gene", fileName)
newres$gene <- as.character(newres$gene)
assign(paste("res", i, sep = ""), newres)
}
## combine results from each TCGA into one data.frame called res_combined
res_combined <- res1
for (i in setdiff(seq_along(filesList), 1)){
res_combined <- inner_join(res_combined, get(paste("res", i, sep = "")), by = "gene")
}
rownames(res_combined) <- res_combined[,1]
res_combined <- res_combined[,-1]
# Data visualization
## generate the heatmap to obtain the clustering
set.seed(2020)
p <- pheatmap::pheatmap(t(res_combined),
fontsize = 10, show_colnames = FALSE,
treeheight_row = 0, treeheight_col = 0)
## get the data ready for heatmap
res_combined$gene <- rownames(res_combined)
res_long <- pivot_longer(res_combined, -gene, values_to = "value",
names_to = "cancer")
res_long$cancer <- factor(res_long$cancer,
levels = rev(colnames(res_combined)[p$tree_row$order]))
res_long$gene <- factor(res_long$gene,
levels = rownames(res_combined)[p$tree_col$order])
## prepare the color palette for heatmap
col_fun = circlize::colorRamp2(seq(0, 100),
colorRampPalette(c("#F2F0F7", "#4A1486"))(101))
mat <- as.matrix(t(res_combined[, -which(colnames(res_combined)=="gene")]))
mat <- mat[colnames(res_combined)[p$tree_row$order],
rownames(res_combined)[p$tree_col$order]]
## list genes to annotate
geneannot <- c("CD3D", "CD3E", "CD8A", "CD8B",
"CD163", "CD68", "CD34", "PTPRC", "MS4A1",
"CD19", "CD4", "FOXP3", "EPCAM", 'KRT18')
locs <-  which(colnames(mat) %in% geneannot)
labels <- colnames(mat)[locs]
ca <- columnAnnotation(mark = anno_mark(at = locs, labels = labels,
labels_gp = gpar(fontsize = 10)))
## create the heatmap
pr <- Heatmap(mat, name = " ",
show_column_names=FALSE,
cluster_columns = FALSE,
show_column_dend = FALSE,
cluster_rows = FALSE,
col = col_fun,
top_annotation = ca,
row_names_gp = gpar(fontsize = 10)
)
pr
## create the ridgeline plot version of the data in the heatmap
pl <- ggplot(res_long, aes(x = value, y = cancer, fill = stat(x))) +
geom_density_ridges_gradient(scale = 1.5, rel_min_height = 0.001) +
scale_fill_gradient(low = "#F2F0F7", high = "#4A1486",
breaks = seq(0, 100, 20)) +
scale_x_continuous(expand = c(0, 0)) +
xlab("") +
ylab("") +
labs(fill = "") +
theme_classic() +
theme(axis.ticks.y = element_blank(),
axis.text.y = element_text(size = 10),
legend.position = "none",
legend.text = element_text(size = 10),
axis.line = element_line(colour = 'black'))
## generate the scatterplot for eight panels
### filter out cancer types
if(FALSE){ ## not run due to unavailability of the TCGA raw data
filesList <- list.files(here("fig 3 - gene rates in tumors", "output"), ".RData")
mergedatList <- NULL
for(file in filesList){
load(here("fig 3 - gene rates in tumors", "output", file))
load(here("fig 3 - gene rates in tumors", "data", gsub("_res.rdata", ".rdata", file)))
cancer <- gsub("_res.rdata", "", file)
## exclude several cancer types for plotting
if(file %in% c("LAML_res.rdata", "DLBC_res.rdata", "THYM_res.rdata")){
next
}
dat <- get(paste0(cancer,".dat.subset"))$e
dat <- dat[, -which(colSums(dat)==0)]
if(length(which(duplicated(colnames(dat))))>0){
dat <- dat[, -which(duplicated(colnames(dat)))]
}
## collect the average expression level across cancer types
meandat <- data.frame(gene = colnames(dat),
mean = apply(log2(dat+1), 2, mean),
count = nrow(dat),
stringsAsFactors = FALSE)
## combine the average expression level with the intercept terms (beta0) from the log normal models
res$gene <- as.character(res$gene)
colnames(res)[3] <- "beta0"
mergedat <- inner_join(meandat, res[, c("gene", "beta0")], by = "gene")
rownames(mergedat) <- mergedat$gene
mergedat$type <- cancer
mergedatList[[cancer]] <- mergedat[uniqueGene,]
}
}
# load the gene lists from eight panels and the color scheme
load(here("fig 3 - gene rates in tumors", "data", "gene", "gene.rdata"))
load(here("fig 3 - gene rates in tumors", "data", "gene", "cellcols.RData"))
load(here("fig 3 - gene rates in tumors", "data", "mergedatList.rdata"))
## beta0 across TCGA cancer type
ntotal <- unique(rowSums(sapply(mergedatList,
function(list) list$count)))
mat2 <- mergedatList[[1]]
mat2$gene <- mergedatList[[1]]$gene
mat2$mean <- rowSums(sapply(mergedatList,
function(list) list$mean*list$count))/ntotal
mat2$beta0 <- rowMeans(sapply(mergedatList, function(list) list$beta0))
genecolor <- alpha("#E74C3C", 0.5) #alpha("orange", 0.5)
## prepare plotting specifications for scatter plots of eight panels
plot_list <- rep(list(mat2), 8)
for(k in 1:8){
plot_list[[k]]$title <- c("CIBERSORT", "EPIC", "MCP-counter",
"quanTIseq", "Timer", "xCell",
"Danaher (2017)", "SafeTME")[k]
transgrey <- adjustcolor("#e6e6e6", alpha.f = 0.25) #adjustcolor("grey", alpha.f = 0.1)
plot_list[[k]]$color <- transgrey
if (k == 7){
geneshighlight <- read_excel(here("fig 3 - gene rates in tumors",
"data", "gene", "Nanostring",
"40425_2017_215_MOESM1_ESM.xlsx"),
sheet = "S4. Selected markers",
col_names = c("gene", "cell"), skip = 1)
plot_list[[k]]$color[which(plot_list[[k]]$gene %in% geneshighlight$gene)] <- genecolor
} else if (k == 8 ) {
load(here("fig 3 - gene rates in tumors", "data", "gene", "safeTME.RData"))
geneshighlight <- rownames(safeTME)
plot_list[[k]]$color[which(plot_list[[k]]$gene %in% geneshighlight)] <- genecolor
} else {
plot_list[[k]]$color[which(plot_list[[k]]$gene %in% geneList[[k]]$gene)] <- genecolor
}
plot_list[[k]] <- plot_list[[k]][order(plot_list[[k]]$color, decreasing = FALSE), ]
}
mat2 <- do.call(rbind, plot_list)
mat2$title <- factor(mat2$title,
levels = c("CIBERSORT", "EPIC", "MCP-counter",
"quanTIseq", "Timer", "xCell",
"Danaher (2017)", "SafeTME"))
## combine all eight scatter plots into one plot
pb <- ggplot(mat2, aes(x = mean, y = beta0)) +
geom_point(aes(color = color),
size = ifelse(mat2$color==transgrey, 0.25, 1))+
scale_color_identity(guide = "legend")+
guides(size = guide_legend(override.aes = list(size = 5, alpha = 1))) +
labs(color = "Included in\ngene lists") +
facet_wrap(~title, nrow = 2) +
xlab(expression("Mean "*log[2]*"(expression)")) +
ylab("Percent of transcripts attributed to cancer cells") +
theme_classic()+
theme(legend.position = "none",
text = element_text(size = 13),
plot.margin = unit(c(-10,0,0,0), "pt"))
# Combine the heatmap, ridgeline plot, and the scatterplots into one plot
gb1 <- pl + theme(plot.margin = unit(c(1.2,0.5,0,0), "cm"))
gb2 <- grid.grabExpr(draw(pr, padding  = unit(c(1.1, 0, 0, 0), "cm")))
p <- (gb1 + gb2 + plot_layout(widths = c(1, 2)))/pb +
plot_layout(heights = c(1, 1)) + plot_annotation(tag_levels = c('a'))
ggsave(file = here("fig 3 - gene rates in tumors", "output", paste0("combined.svg")),
width = 10, height = 11)
install.packages("svglite")
library(svglite)
ggsave(file = here("fig 3 - gene rates in tumors", "output", paste0("combined.svg")),
width = 10, height = 11)
pb
p <- (gb1 + gb2 + plot_layout(widths = c(1, 2.2)))/pb +
plot_layout(heights = c(1, 1)) + plot_annotation(tag_levels = c('a'))
ggsave(file = here("fig 3 - gene rates in tumors", "output", paste0("combined.pdf")),
width = 10, height = 11)
gb2 <- grid.grabExpr(draw(pr, padding  = unit(c(1.1, 0, 0, 0.4), "cm")))
ggsave(file = here("fig 3 - gene rates in tumors", "output", paste0("combined.pdf")),
width = 10, height = 11)
gb2 <- grid.grabExpr(draw(pr, padding  = unit(c(1.1, 0, 0, 0), "cm"))) + + theme(plot.margin = unit(c(1.2,0.5,0,1), "cm"))
gb2 <- grid.grabExpr(draw(pr, padding  = unit(c(1.1, 0, 0, 0), "cm"))) + theme(plot.margin = unit(c(1.2,0.5,0,1), "cm"))
p <- (gb1 + gb2 + plot_layout(widths = c(1, 2)))/pb +
plot_layout(heights = c(1, 1)) + plot_annotation(tag_levels = c('a'))
ggsave(file = here("fig 3 - gene rates in tumors", "output", paste0("combined.pdf")),
width = 10, height = 11)
gb2 <- grid.grabExpr(draw(pr, padding  = unit(c(1.1, 0, 0, 1), "cm"))) #+ theme(plot.margin = unit(c(1.2,0.5,0,1), "cm"))
p <- (gb1 + gb2 + plot_layout(widths = c(1, 2)))/pb +
plot_layout(heights = c(1, 1)) + plot_annotation(tag_levels = c('a'))
ggsave(file = here("fig 3 - gene rates in tumors", "output", paste0("combined.pdf")),
width = 10, height = 11)
?pheatmap
