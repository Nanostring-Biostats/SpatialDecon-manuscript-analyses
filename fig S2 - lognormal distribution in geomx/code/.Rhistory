neg <- NULL
if (!is.null(neg_expression_values)) {
neg <- object@expression[[neg_feat_type]][[neg_expression_values]]
}
fake <- NULL
if (!is.null(fake_expression_values)) {
fake <- object@expression[[fake_feat_type]][[fake_expression_values]]
}
fake
str(object@cell_metadata[[tissue_feat_type]][[tissue_column]])
tissue_feat_type = "rna"
str(object@cell_metadata[[tissue_feat_type]][[tissue_column]])
# call QC_stats_from_tissues, which operates on base objects:
out <- QC_stats_from_tissues(
counts = object@expression[[count_feat_type]][[count_expression_values]],
neg = neg,
fake = fake,
tissue = object@cell_metadata[[tissue_feat_type]][[tissue_column]],
cell_removed = rep(FALSE, length(tissue)))
counts = object@expression[[count_feat_type]][[count_expression_values]]
tissue = object@cell_metadata[[tissue_feat_type]][[tissue_column]]
cell_removed = rep(FALSE, length(tissue))
# summarize cells per tissue:
n.cells.analyzed <- table(tissue[!cell_removed])
if (sum(cell_removed) > 0) {
n.cells.removed <- table(tissue[cell_removed])
}
# summarize counts:
totcounts <- Matrix::colSums(counts)
counts.per.cell.mean <- round(by(totcounts, INDICES = tissue, FUN = mean), 0.1)
counts.per.cell.q1 <- round(by(totcounts, INDICES = tissue, FUN = quantile, 0.1), 0.1)
counts.per.cell.q9 <- round(by(totcounts, INDICES = tissue, FUN = quantile, 0.9), 0.1)
# summarize negprobes:
if (!is.null(neg)) {
totneg <- Matrix::colSums(neg)
neg.per.cell.mean <- round(by(totneg, INDICES = tissue, FUN = mean), 0.1)
}
# summarize falecodes:
if (!is.null(fake)) {
totfake <- Matrix::colSums(fake)
fake.per.cell.mean <- round(by(totfake, INDICES = tissue, FUN = mean), 0.1)
}
# combine all stats:
stats <- c("n.cells.analyzed", "n.cells.removed",
"counts.per.cell.mean", "counts.per.cell.q1", "counts.per.cell.q9",
"neg.per.cell.mean", "fake.per.cell.mean")
out = data.frame(tissue = unique(tissue))
for (stat in stats) {
if (exists(stat)) {
out[[stat]] <- get(stat)[out$tissue]
}
}
out
# call QC_stats_from_tissues, which operates on base objects:
out <- QC_stats_from_tissues(
counts = object@expression[[count_feat_type]][[count_expression_values]],
neg = neg,
fake = fake,
tissue = object@cell_metadata[[tissue_feat_type]][[tissue_column]],
cell_removed = rep(FALSE, length(tissue)))
rm(tissue)
# call QC_stats_from_tissues, which operates on base objects:
out <- QC_stats_from_tissues(
counts = object@expression[[count_feat_type]][[count_expression_values]],
neg = neg,
fake = fake,
tissue = object@cell_metadata[[tissue_feat_type]][[tissue_column]],
cell_removed = rep(FALSE, length(tissue)))
tissue = rep("all", length(object@cell_ID))
tissue
if (!is.null(tissue_column)) {
tissue <- object@cell_metadata[[tissue_feat_type]][[tissue_column]]
}
tussue
tissue
source('~/Ptolemy/R/summarizeSMIPerformance.R', echo=TRUE)
summarizeSMIPerformance(mini_tma, tissue_column = "slide",
fake_feat_type = NULL, fake_expression_values = NULL)
is.element(object@cell_ID, flagged_cell_ids)
flagged_cell_ids = NULL
is.element(object@cell_ID, flagged_cell_ids)
source('~/Ptolemy/R/summarizeSMIPerformance.R', echo=TRUE)
summarizeSMIPerformance(mini_tma, tissue_column = "slide",
fake_feat_type = NULL, fake_expression_values = NULL)
head(mini_tma@cell_ID)
summarizeSMIPerformance(mini_tma, tissue_column = "slide",
fake_feat_type = NULL, fake_expression_values = c("1_4446" ,"1_4448"))
summarizeSMIPerformance(mini_tma, tissue_column = "slide",
fake_feat_type = NULL, fake_expression_values = NULL,
flagged_cell_ids = c("1_4446" ,"1_4448"))
source('~/Ptolemy/R/summarizeSMIPerformance.R', echo=TRUE)
summarizeSMIPerformance(mini_tma, tissue_column = "slide",
fake_feat_type = NULL, fake_expression_values = c("1_4446" ,"1_4448"))
summarizeSMIPerformance(mini_tma, tissue_column = "slide",
fake_feat_type = NULL, fake_expression_values = NULL,
flagged_cell_ids = c("1_4446" ,"1_4448"))
library(devtools)
install("C:\\Users\\pdanaher\\Desktop\\Gemini-interactive-visualizer-main\\Gemini-interactive-visualizer-main")
library(installr)
updateR()
library(Ptolemy)
?plotCells
?scale_color_viridis
1.5 * 1000000 / 5000
1.5 * 200000 / 5000
load("C:/Users/pdanaher/Box Sync/Gemini/Evan Newell collaboration/4114 - Evan Newell 1000plex/Evan 1000plex giotto object.RData")
ls()
str(gem@expression)
str(gem)
gem@dimension_reduction
load("C:/Users/pdanaher/Box Sync/Gemini/Evan Newell collaboration/4114 - Evan Newell 1000plex/Evan 1000plex UMAP.RData")
ls()
str(um)
umapcoords = um$layout
load("C:/Users/pdanaher/Box Sync/Gemini/Evan Newell collaboration/4114 - Evan Newell 1000plex/4114 semi-supervised results - evan reference profiles.RData")
ls()
str(ensemi)
head(ensemi$clust)
table(ensemi$clust)
rm(ensemi)
load("C:/Users/pdanaher/Box Sync/Gemini/Evan Newell collaboration/4114 - Evan Newell 1000plex/4114 semi-supervised results - evan reference profiles.RData")
head(gem@spatial_locs)
plot(gem@spatial_locs[,1:2], col = colors()[as.numeric(as.factor(ensemi$clust))])
plot(gem@spatial_locs[,1:2], col = colors()[as.numeric(as.factor(ensemi$clust))], cex = 0.3, pch = 16)
celltype = ensemi$clust
celltyps[celltype == "Cluster A"] = "i"
celltype[celltype == "Cluster A"] = "i"
celltype[celltype == "Cluster B"] = "i"
table(celltype)
save(celltype, umapcoords, file = "cell clusters and umap coordinates.RData")
head(pDataDT(gem))
pDataDT(gem)$cluster = celltype
gem@cell_metadata$rna$cluster = celltype
gem@cell_metadata$rna$umap1 = umapcoords[,1]
gem@cell_metadata$rna$umap2 = umapcoords[,2]
save(gem, file = "Evan Newell data with clusters and umap coords.RData")
getwd()
rn(list = ls())
rm(list = ls())
setwd("~/SpatialDecon-manuscript-analyses/fig S__ - lognormal distribution in geomx/code")
rm(list = ls())
library(NormqPCR)
library(scales)
library(ggplot2)
library(ggthemes)
raw = t(as.matrix(read.csv("../data/HEK393-CCRF mixture raw data.csv", row.names = 1, header = T, stringsAsFactors = F)))
annot = read.csv("../data/HEK393-CCRF mixture AOI annotations.csv", row.names = 1, header = T, stringsAsFactors = F)
pnotes = read.csv("../data/HEK393-CCRF mixture probe notes.csv", stringsAsFactors = F, row.names = 1)
# derive housekeepers:
topexpressing = rownames(raw)[order(rowMeans(raw), decreasing = T)[1:50]]
genorm = selectHKs(t(log2(raw)[topexpressing, ]),
method = "geNorm",
Symbols = topexpressing)
plot(genorm$variation)
hks = genorm$ranking[1:27]
# normalize:
annot$hk.factor = exp(colMeans(log(raw[hks, ])))
norm = sweep(raw, 2, annot$hk.factor, "/") * mean(annot$hk.factor)
table(annot$mixprop == 1)
# isolate pure HEK293T:
use = annot$mixprop == 1
# isolate pure HEK293T:
use = rownames(annot)[annot$mixprop == 1]
use
norm = norm[use, ]
dim(norm)
norm = norm[, use]
annot = annot[use, ]
dim(norm)
norm[1:10,1:5]
# linear and logscale data:
lindat = norm
logdat = log2(pmax(norm, 1))
# calculate skew for all genes, in both logscale and linear scale:
skew.lin = apply(lindat, 2, skewness)
raw = t(as.matrix(read.csv("../data/HEK393-CCRF mixture raw data.csv", row.names = 1, header = T, stringsAsFactors = F)))
library(e1071)
# calculate skew for all genes, in both logscale and linear scale:
skew.lin = apply(lindat, 2, skewness)
# linear and logscale data:
lindat = t(norm)
logdat = t(log2(pmax(norm, 1)))
# calculate skew for all genes, in both logscale and linear scale:
skew.lin = apply(lindat, 2, skewness)
skew.log = apply(logdat, 2, skewness)
denslin = density(skew.lin[!is.na(skew.lin)])
denslog = density(skew.log[!is.na(skew.log)])
par(mar = c(4,4,.1,.1))
plot(denslin, col = 0, xlab = "Skewness of genes in TCGA LUAD", ylab = "",
cex.lab = 1.2, cex.axis = 0.7, main = "", ylim = c(0, max(denslog$y)))
polygon(denslin, col = alpha("grey50", 0.5), border = NA)
polygon(denslog, col = alpha("orange", 0.5), border = NA)
legend("topright", fill = alpha(c("grey50", "orange"), 0.5),
legend = c("Linear-scale data", "Log-transformed data"), cex = 1)
rm(list = ls())
library(NormqPCR)
library(scales)
library(ggplot2)
library(ggthemes)
library(e1071)
#### data loading ----------------------------------------
name = "ICP20th"
# load segment/AOI annotation:
annot = read.table(here("fig 5 - NSCLC tumor analysis/", paste0("data/", name, "_SegmentProperties.txt")),
header = T, sep = "\t", quote = "", stringsAsFactors = F, comment.char = "")
library(here)
#### data loading ----------------------------------------
name = "ICP20th"
# load segment/AOI annotation:
annot = read.table(here("fig 5 - NSCLC tumor analysis/", paste0("data/", name, "_SegmentProperties.txt")),
header = T, sep = "\t", quote = "", stringsAsFactors = F, comment.char = "")
annot
rownames(annot) = make.names(annot$Sample_ID)
head(annot)
# load normalized data:
negnorm = as.matrix(read.table(here("fig 5 - NSCLC tumor analysis/", paste0("data/", name, "_NegNorm_TargetCountMatrix.txt")),
header = T, row.names = 1))
# linear and logscale data:
lindat = t(negnorm)
logdat = t(log2(pmax(negnorm, 1)))
dim(lindat)
# calculate skew for all genes, in both logscale and linear scale:
skew.lin = apply(lindat, 2, skewness)
skew.log = apply(logdat, 2, skewness)
denslin = density(skew.lin[!is.na(skew.lin)])
denslog = density(skew.log[!is.na(skew.log)])
par(mar = c(4,4,.1,.1))
plot(denslin, col = 0, xlab = "Skewness of genes in TCGA LUAD", ylab = "",
cex.lab = 1.2, cex.axis = 0.7, main = "", ylim = c(0, max(denslog$y)))
polygon(denslin, col = alpha("grey50", 0.5), border = NA)
polygon(denslog, col = alpha("orange", 0.5), border = NA)
legend("topright", fill = alpha(c("grey50", "orange"), 0.5),
legend = c("Linear-scale data", "Log-transformed data"), cex = 1)
annot$AOI.name
use = rownames(annot)[annot$AOI.name == "TME"]
use
# use just TME AOIs:
use = rownames(annot)[annot$AOI.name == "TME"]
negnorm = negnorm[, use]
annot = anont[use, ]
# linear and logscale data:
lindat = t(negnorm)
logdat = t(log2(pmax(negnorm, 1)))
# calculate skew for all genes, in both logscale and linear scale:
skew.lin = apply(lindat, 2, skewness)
skew.log = apply(logdat, 2, skewness)
denslin = density(skew.lin[!is.na(skew.lin)])
denslog = density(skew.log[!is.na(skew.log)])
par(mar = c(4,4,.1,.1))
plot(denslin, col = 0, xlab = "Skewness of genes in TCGA LUAD", ylab = "",
cex.lab = 1.2, cex.axis = 0.7, main = "", ylim = c(0, max(denslog$y)))
polygon(denslin, col = alpha("grey50", 0.5), border = NA)
polygon(denslog, col = alpha("orange", 0.5), border = NA)
legend("topright", fill = alpha(c("grey50", "orange"), 0.5),
legend = c("Linear-scale data", "Log-transformed data"), cex = 1)
svg("results/skewness in lin vs. log - geomx.svg", width = 6, height = 4)
par(mar = c(4,4,.1,.1))
plot(denslin, col = 0, xlab = "Skewness of genes in\nmicroenvironment regions", ylab = "",
cex.lab = 1.2, cex.axis = 0.7, main = "", ylim = c(0, max(denslog$y)))
polygon(denslin, col = alpha("grey50", 0.5), border = NA)
svg("results/skewness in lin vs. log - geomx.svg", width = 6, height = 4)
dev.off()
svg("results/skewness in lin vs. log - geomx.svg", width = 6, height = 4)
dev.off()
getwd()
svg("results/skewness in lin vs. log - geomx.svg", width = 6, height = 4)
mean(abs(skew.log) > 2, na.rm = T)
# summary stats:
mean(skew.lin > 2, na.rm = T)
mean(abs(skew.log) > 2, na.rm = T)
range(skew.lin)
range(skew.lin, na.rm = T)
sum(skew.lin < 0, na.rm = T)
table(skew.lin < 0, na.rm = T)
table(skew.lin < 0)
table(skew.lin > 2)
sum(table(skew.lin < 0))
sum(is.na(skew.lin))
mean(skew.lin > 2, na.rm = T)
mean(abs(skew.log) > 2, na.rm = T)
# summary stats:
mean(skew.lin > 2, na.rm = T)
mean(skew.lin, na.rm = T)
mean(skew.log, na.rm = T)
mean(abs(skew.log) > 2, na.rm = T)
hist(skew.lin, col = alpha("grey50", 0.5), border = NA, ylab = "Number of genes", xlab = "Skewness",
breaks = seq(-5,25, length.out = 100), ylim = c(0, 4000))
hist(skew.log, add = TRUE, col = alpha("orange", 0.5), border = NA,
breaks = seq(-5,25, length.out = 100))
# show mean-variance relationship on logscale, linear scale:
means.lin = apply(lindat, 2, mean)
means.log = apply(logdat, 2, mean)
sds.lin = apply(lindat, 2, sd)
sds.log = apply(logdat, 2, sd)
# summary stats:
range(sds.lin[means.lin > 0])
range(sds.lin[means.lin > 0])[2] / range(sds.lin[means.lin > 0])[1]
range(sds.log, na.rm = T)
range(sds.log, na.rm = T)[2] / range(sds.log, na.rm = T)[1]
par(mar = c(4,4,.1,1))
par(mfrow = c(1,2))
plot(log2(means.lin), log2(sds.lin), log = "", xlab = "Mean", ylab = "SD",
col = alpha("dodgerblue4", 0.05), pch = 16, xaxt = "n", yaxt = "n")
axis(1, at = log2(10^seq(-3, 5, 2)), labels = 10^(seq(-3, 5, 2)), cex.axis = 0.65)
axis(2, at = log2(10^seq(-15, 15, 2)), labels = 10^(seq(-15, 15, 2)), cex.axis = 0.75)
legend("top", legend = "linear-scale data    ", bty = "n")
lines(lowess(log(means.lin[sds.lin > 0]), log(sds.lin[sds.lin > 0])), col = "orange", lwd = 2)
plot(means.log, sds.log, xlab = "Mean", ylab = "SD",
col = alpha("dodgerblue4", 0.05), pch = 16, cex.axis = 0.65)
legend("top", legend = "log2-scale data    ", bty = "n")
lines(lowess(means.log[!is.na(sds.log)], sds.log[!is.na(sds.log)]), col = "orange", lwd = 2)
svg("mean vs. sd.svg", height = 3, width = 6.6)
par(mar = c(4,4,.1,1))
par(mfrow = c(1,2))
plot(log2(means.lin), log2(sds.lin), log = "", xlab = "Mean", ylab = "SD",
col = alpha("dodgerblue4", 0.05), pch = 16, xaxt = "n", yaxt = "n")
axis(1, at = log2(10^seq(-3, 5, 2)), labels = 10^(seq(-3, 5, 2)), cex.axis = 0.65)
axis(2, at = log2(10^seq(-15, 15, 2)), labels = 10^(seq(-15, 15, 2)), cex.axis = 0.75)
legend("top", legend = "linear-scale data    ", bty = "n")
lines(lowess(log(means.lin[sds.lin > 0]), log(sds.lin[sds.lin > 0])), col = "orange", lwd = 2)
plot(means.log, sds.log, xlab = "Mean", ylab = "SD",
col = alpha("dodgerblue4", 0.05), pch = 16, cex.axis = 0.65)
legend("top", legend = "log2-scale data    ", bty = "n")
lines(lowess(means.log[!is.na(sds.log)], sds.log[!is.na(sds.log)]), col = "orange", lwd = 2)
dev.off()
getwd()
svg("results/mean vs. sd.svg", height = 3, width = 6.6)
getwd()
svg("mean vs. sd.svg", height = 3, width = 6.6)
par(mar = c(4,4,.1,1))
par(mfrow = c(1,2))
plot(log2(means.lin), log2(sds.lin), log = "", xlab = "Mean", ylab = "SD",
col = alpha("dodgerblue4", 0.05), pch = 16, xaxt = "n", yaxt = "n")
axis(1, at = log2(10^seq(-3, 5, 2)), labels = 10^(seq(-3, 5, 2)), cex.axis = 0.65)
axis(2, at = log2(10^seq(-15, 15, 2)), labels = 10^(seq(-15, 15, 2)), cex.axis = 0.75)
legend("top", legend = "linear-scale data    ", bty = "n")
lines(lowess(log(means.lin[sds.lin > 0]), log(sds.lin[sds.lin > 0])), col = "orange", lwd = 2)
plot(means.log, sds.log, xlab = "Mean", ylab = "SD",
col = alpha("dodgerblue4", 0.05), pch = 16, cex.axis = 0.65)
legend("top", legend = "log2-scale data    ", bty = "n")
lines(lowess(means.log[!is.na(sds.log)], sds.log[!is.na(sds.log)]), col = "orange", lwd = 2)
dev.off()
svg("../results/mean vs. sd.svg", height = 3, width = 6.6)
par(mar = c(4,4,.1,1))
par(mfrow = c(1,2))
plot(log2(means.lin), log2(sds.lin), log = "", xlab = "Mean", ylab = "SD",
col = alpha("dodgerblue4", 0.05), pch = 16, xaxt = "n", yaxt = "n")
axis(1, at = log2(10^seq(-3, 5, 2)), labels = 10^(seq(-3, 5, 2)), cex.axis = 0.65)
axis(2, at = log2(10^seq(-15, 15, 2)), labels = 10^(seq(-15, 15, 2)), cex.axis = 0.75)
legend("top", legend = "linear-scale data    ", bty = "n")
lines(lowess(log(means.lin[sds.lin > 0]), log(sds.lin[sds.lin > 0])), col = "orange", lwd = 2)
plot(means.log, sds.log, xlab = "Mean", ylab = "SD",
col = alpha("dodgerblue4", 0.05), pch = 16, cex.axis = 0.65)
legend("top", legend = "log2-scale data    ", bty = "n")
lines(lowess(means.log[!is.na(sds.log)], sds.log[!is.na(sds.log)]), col = "orange", lwd = 2)
dev.off()
svg("../results/skewness in lin vs. log - geomx.svg", width = 6, height = 4)
par(mar = c(4,4,.1,.1))
plot(denslin, col = 0, xlab = "Skewness of genes in\nmicroenvironment regions", ylab = "",
cex.lab = 1.2, cex.axis = 0.7, main = "", ylim = c(0, max(denslog$y)))
polygon(denslin, col = alpha("grey50", 0.5), border = NA)
polygon(denslog, col = alpha("orange", 0.5), border = NA)
legend("topright", fill = alpha(c("grey50", "orange"), 0.5),
legend = c("Linear-scale data", "Log-transformed data"), cex = 1)
dev.off()
par(mar = c(4,4,.1,1))
par(mfrow = c(1,2))
plot(log2(means.lin), log2(sds.lin), log = "", xlab = "Mean", ylab = "SD",
col = alpha("dodgerblue4", 0.2), pch = 16, xaxt = "n", yaxt = "n")
axis(1, at = log2(10^seq(-3, 5, 2)), labels = 10^(seq(-3, 5, 2)), cex.axis = 0.65)
axis(2, at = log2(10^seq(-15, 15, 2)), labels = 10^(seq(-15, 15, 2)), cex.axis = 0.75)
legend("top", legend = "linear-scale data    ", bty = "n")
lines(lowess(log(means.lin[sds.lin > 0]), log(sds.lin[sds.lin > 0])), col = "orange", lwd = 2)
plot(means.log, sds.log, xlab = "Mean", ylab = "SD",
col = alpha("dodgerblue4", 0.05), pch = 16, cex.axis = 0.65)
legend("top", legend = "log2-scale data    ", bty = "n")
lines(lowess(means.log[!is.na(sds.log)], sds.log[!is.na(sds.log)]), col = "orange", lwd = 2)
lines(lowess(log2(means.lin[sds.lin > 0]), log2(sds.lin[sds.lin > 0])), col = "orange", lwd = 2)
par(mar = c(4,4,.1,1))
par(mfrow = c(1,2))
plot(log2(means.lin), log2(sds.lin), log = "", xlab = "Mean", ylab = "SD",
col = alpha("dodgerblue4", 0.2), pch = 16, xaxt = "n", yaxt = "n")
axis(1, at = log2(10^seq(-3, 5, 2)), labels = 10^(seq(-3, 5, 2)), cex.axis = 0.65)
axis(2, at = log2(10^seq(-15, 15, 2)), labels = 10^(seq(-15, 15, 2)), cex.axis = 0.75)
legend("top", legend = "linear-scale data    ", bty = "n")
lines(lowess(log2(means.lin[sds.lin > 0]), log2(sds.lin[sds.lin > 0])), col = "orange", lwd = 2)
plot(means.log, sds.log, xlab = "Mean", ylab = "SD",
col = alpha("dodgerblue4", 0.05), pch = 16, cex.axis = 0.65)
legend("top", legend = "log2-scale data    ", bty = "n")
lines(lowess(means.log[!is.na(sds.log)], sds.log[!is.na(sds.log)]), col = "orange", lwd = 2)
svg("../results/mean vs. sd.svg", height = 3, width = 6.6)
par(mar = c(4,4,.1,1))
par(mfrow = c(1,2))
plot(log2(means.lin), log2(sds.lin), log = "", xlab = "Mean", ylab = "SD",
col = alpha("dodgerblue4", 0.2), pch = 16, xaxt = "n", yaxt = "n")
axis(1, at = log2(10^seq(-3, 5, 2)), labels = 10^(seq(-3, 5, 2)), cex.axis = 0.65)
axis(2, at = log2(10^seq(-15, 15, 2)), labels = 10^(seq(-15, 15, 2)), cex.axis = 0.75)
legend("top", legend = "linear-scale data    ", bty = "n")
lines(lowess(log2(means.lin[sds.lin > 0]), log2(sds.lin[sds.lin > 0])), col = "orange", lwd = 2)
plot(means.log, sds.log, xlab = "Mean", ylab = "SD",
col = alpha("dodgerblue4", 0.05), pch = 16, cex.axis = 0.65)
legend("top", legend = "log2-scale data    ", bty = "n")
lines(lowess(means.log[!is.na(sds.log)], sds.log[!is.na(sds.log)]), col = "orange", lwd = 2)
dev.off()
svg("../results/mean vs. sd.svg", height = 3, width = 6.6)
par(mar = c(4,4,.1,1))
par(mfrow = c(1,2))
plot(log2(means.lin), log2(sds.lin), log = "", xlab = "Mean", ylab = "SD",
col = alpha("dodgerblue4", 0.2), pch = 16, xaxt = "n", yaxt = "n")
axis(1, at = log2(10^seq(-3, 5, 2)), labels = 10^(seq(-3, 5, 2)), cex.axis = 0.65)
axis(2, at = log2(10^seq(-15, 15, 2)), labels = 10^(seq(-15, 15, 2)), cex.axis = 0.75)
legend("top", legend = "linear-scale data    ", bty = "n")
lines(lowess(log2(means.lin[sds.lin > 0]), log2(sds.lin[sds.lin > 0])), col = "orange", lwd = 2)
plot(means.log, sds.log, xlab = "Mean", ylab = "SD",
col = alpha("dodgerblue4", 0.2), pch = 16, cex.axis = 0.65)
legend("top", legend = "log2-scale data    ", bty = "n")
lines(lowess(means.log[!is.na(sds.log)], sds.log[!is.na(sds.log)]), col = "orange", lwd = 2)
dev.off()
dev.off()
gene = "CD274"
par(mfrow = c(1, 2))
par(mar = c(4,1,1,.1))
hist(lindat[, gene], breaks = 30, col = alpha("grey50", 0.5), border = NA, main = "",
xlab = paste0("Linear-scale ", gene, " expression"), ylab = "",
yaxt = "n", cex.axis = 0.65)
legend("center", legend = paste0("skewness = ", round(skewness(lindat[, gene]), 1)), bty = "n")
hist(logdat[, gene], breaks = 30, col = alpha("orange", 0.5), border = NA, main = "",
xlab = paste0("Log-scale ", gene, " expression"), ylab = "",
yaxt = "n", cex.axis = 0.65)
legend("center", legend = paste0("skewness = ", round(skewness(logdat[, gene]), 1)), bty = "n")
dev.off()
# histograms of CD274
svg("gene histograms.svg", height = 3.1, width = 6)
gene = "CD274"
par(mfrow = c(1, 2))
par(mar = c(4,1,1,.1))
hist(lindat[, gene], breaks = 30, col = alpha("grey50", 0.5), border = NA, main = "",
xlab = paste0("Linear-scale ", gene, " expression"), ylab = "",
yaxt = "n", cex.axis = 0.65)
legend("center", legend = paste0("skewness = ", round(skewness(lindat[, gene]), 1)), bty = "n")
hist(logdat[, gene], breaks = 30, col = alpha("orange", 0.5), border = NA, main = "",
xlab = paste0("Log-scale ", gene, " expression"), ylab = "",
yaxt = "n", cex.axis = 0.65)
legend("center", legend = paste0("skewness = ", round(skewness(logdat[, gene]), 1)), bty = "n")
dev.off()
svg("../results/gene histograms.svg", height = 3.1, width = 6)
gene = "CD274"
par(mfrow = c(1, 2))
par(mar = c(4,1,1,.1))
hist(lindat[, gene], breaks = 30, col = alpha("grey50", 0.5), border = NA, main = "",
xlab = paste0("Linear-scale ", gene, " expression"), ylab = "",
yaxt = "n", cex.axis = 0.65)
legend("center", legend = paste0("skewness = ", round(skewness(lindat[, gene]), 1)), bty = "n")
hist(logdat[, gene], breaks = 30, col = alpha("orange", 0.5), border = NA, main = "",
xlab = paste0("Log-scale ", gene, " expression"), ylab = "",
yaxt = "n", cex.axis = 0.65)
legend("center", legend = paste0("skewness = ", round(skewness(logdat[, gene]), 1)), bty = "n")
dev.off()
#### in a TCGA sample, show influence of every point in LM22
# (how do you do that without running one time per gene, leaving a single gene out?)
# (should prob just do that. also for svm.)
# summary stats:
range(sds.lin[means.lin > 0])
range(sds.lin[means.lin > 0])[2] / range(sds.lin[means.lin > 0])[1]
# summary stats:
range(sds.lin[means.lin > 1])
which(sds.lin==0)
range(sds.lin[!grepl("NegProbs", names(sds.lin))])
range(sds.lin[!grepl("NegProbs", names(sds.lin)) & (means.lin > 0)])
range(sds.lin[!grepl("NegProbe", names(sds.lin)) & (means.lin > 0)])
range(sds.lin[!grepl("NegProbe", names(sds.lin)) & (means.lin > -1)])
range(sds.lin[!grepl("NegProbe", names(sds.lin))])
997.2917431 / 0.831796
# show mean-variance relationship on logscale, linear scale:
means.lin = apply(lindat[!grepl("NegProbe", rownames(lindat))], 2, mean)
# show mean-variance relationship on logscale, linear scale:
means.lin = apply(lindat[!grepl("NegProbe", rownames(lindat)), ], 2, mean)
means.lin
# show mean-variance relationship on logscale, linear scale:
means.lin = apply(lindat[!grepl("NegProbe", rownames(lindat)), ], 2, mean)
means.log = apply(logdat[!grepl("NegProbe", rownames(logdat)), ], 2, mean)
sds.lin = apply(lindat[!grepl("NegProbe", rownames(lindat)), ], 2, sd)
sds.log = apply(logdat[!grepl("NegProbe", rownames(logdat)), ], 2, sd)
# summary stats:
range(sds.lin[means.lin > 1])
range(sds.lin[!grepl("NegProbe", names(sds.lin))])
range(sds.lin[means.lin > 0])[2] / range(sds.lin[means.lin > 0])[1]
# summary stats:
range(sds.lin[means.lin > 1])
range(sds.lin[!grepl("NegProbe", names(sds.lin))])
which(sds.lin == 0)
# show mean-variance relationship on logscale, linear scale:
means.lin = apply(lindat[!grepl("NegProbe", rownames(lindat)), ], 2, mean)
means.log = apply(logdat[!grepl("NegProbe", rownames(logdat)), ], 2, mean)
sds.lin = apply(lindat[!grepl("NegProbe", rownames(lindat)), ], 2, sd)
sds.log = apply(logdat[!grepl("NegProbe", rownames(logdat)), ], 2, sd)
which(sds.lin == 0)
# show mean-variance relationship on logscale, linear scale:
means.lin = apply(lindat[, !grepl("NegProbe", colnames(lindat))], 2, mean)
means.log = apply(logdat[, !grepl("NegProbe", colnames(logdat))], 2, mean)
sds.lin = apply(lindat[, !grepl("NegProbe", colnames(lindat))], 2, sd)
sds.log = apply(logdat[, !grepl("NegProbe", colnames(logdat))], 2, sd)
# summary stats:
range(sds.lin[means.lin > 1])
# summary stats:
range(sds.lin)
range(sds.lin[means.lin > 0])[2] / range(sds.lin[means.lin > 0])[1]
range(sds.lin)[2] / range(sds.lin)[1]
range(sds.log, na.rm = T)
range(sds.log, na.rm = T)[2] / range(sds.log, na.rm = T)[1]
source('~/SpatialDecon-manuscript-analyses/fig S__ - lognormal distribution in geomx/code/evaluate lognormal distribution in GeoMx.R', echo=TRUE)
source('~/SpatialDecon-manuscript-analyses/fig S__ - lognormal distribution in geomx/code/evaluate lognormal distribution in GeoMx.R', echo=TRUE)
